plot_shapes = False         # generate the two left figures in Fig. 3
generate_table = False      # generate Table 1
run_forward_opt = True     # output needed for the next two options
generate_dp = False         # generate the right plot of Fig. 3
generate_mp4 = False        # generate mp4 of the time dependent results


import visualization.colormaps 

# plot shapes
from visualization.visualize_shapes import visualize_shape

if plot_shapes:
    fnames = ["mesh_triangles.xdmf", "domains_final.xdmf"] # these files are in folder /example/FSI/mesh
    outname = ["init_plot.png", "final_plot.png"]
    for i in range(len(fnames)):
        print('visualize ', fnames[i])
        visualize_shape(fnames[i], outname[i])

# generate latex table
from visualization.read_terminal_output import generate_table
if generate_table:
    txtname = "terminal_2207.txt"   # terminal output of simulation needs to be saved to /example/FSI/mesh/Output/txtname
    txtout = 'table.txt'
    txtout_all = 'to_shortened.txt'
    generate_table(txtname, txtout, txtout_all)

# run forward simulation on initial and optimized geometry
from visualization.run_forward_solve import run_forward

only_optimized = False # set to False if initial domain was not optimized
if only_optimized:
    initial = [False]
else:
    initial = [True, False]

if run_forward_opt: # not implemented in parallel yet
    T = 50.0 #time horizon 
    deltat = 0.005 # needed, otherwise trouble for large time horizons
    for i in initial:
        run_forward(i, T, deltat)


# generate displacement plot
from visualization.plot_displacement import plot_displacement, colors
import numpy as np
from pathlib import Path
here = Path(__file__).parent.parent.resolve()

foldernames = ["Init", "Opt"]  # folders in /example/FSI/Output/Forward generated by run_forward

if generate_dp:
    names=  ["initial geometry", "optimized geometry"] 

    times_list = []
    displacement_list = []

    for i in foldernames:
        str_ = str(here) + "/Output/Forward/" + i
        times_list.append(np.loadtxt(str_ + "/times.txt"))
        displacement_list.append(np.loadtxt(str_ + "/displacementy.txt"))

    plot_displacement(displacement_list, times_list,
                        str(here)+"/Output/displacement_plot.pdf", colors, names)

# generate clips
from visualization.visualize_simulation import make_movie

if generate_mp4:            
    outnames = ["init_fsi.mp4", "opt_fsi.mp4"]
    for i in range(len(foldernames)):
        make_movie(foldername=foldernames[i], outname=outnames[i])